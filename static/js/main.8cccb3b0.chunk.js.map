{"version":3,"sources":["components/Cards/cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Charts.jsx","components/CountryPicker/CountryPicker.jsx","images/covid.png","App.js","reportWebVitals.js","index.js","app.module.css","components/Chart/charts.module.css","components/CountryPicker/countryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","vairant","apiUrl","fetchData","country","a","dynamicUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","App","state","fetchedData","setState","this","src","covidImage","alt","image","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cccb3b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__3946b\",\"card\":\"cards_card__2uKtg\",\"infected\":\"cards_infected__2XEA9\",\"recovered\":\"cards_recovered__35Nin\",\"deaths\":\"cards_deaths__7fD2X\"};","import React from 'react'\r\nimport {Card, CardContent, Typography, Grid} from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./cards.module.css\";\r\n\r\nfunction Cards({data: {confirmed, recovered, deaths, lastUpdate}}) {\r\n  if(!confirmed){\r\n    return \"Loading...\"\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography vairant=\"body2\">Number of active cases of COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography vairant=\"body2\">Number of recoveries of COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography vairant=\"body2\">Number of deaths from COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import axios from \"axios\";\r\n\r\nconst apiUrl=\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) =>{\r\n  let dynamicUrl = apiUrl;\r\n  if(country){\r\n    dynamicUrl = `${apiUrl}/countries/${country}`\r\n  }\r\n  try{\r\n    const {data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(dynamicUrl);\r\n\r\n    return {confirmed, recovered, deaths, lastUpdate};\r\n  } catch (err){\r\n    console.log('there is an error: ', err)\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async ()=>{\r\n  try{\r\n    const {data} = await axios.get(`${apiUrl}/daily`);\r\n    const modifiedData = data.map((dailyData) =>({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate\r\n    }));\r\n    return modifiedData;\r\n  } catch(err){\r\n    console.log('there as an error with the api second call: ', err)\r\n  }\r\n}\r\n\r\nexport const fetchCountries = async () =>{\r\n  try {\r\n    const {data: {countries}} = await axios.get(`${apiUrl}/countries`);\r\n    return countries.map((country)=> country.name)\r\n\r\n  } catch (err) {\r\n    console.log('this is the error from countries: ', err);\r\n  }\r\n}","import React, {useState, useEffect} from 'react'\r\nimport {fetchDailyData} from \"../../api\"\r\nimport {Line, Bar} from \"react-chartjs-2\";\r\n\r\nimport styles from \"./charts.module.css\";\r\n\r\nfunction Charts({data: {confirmed, deaths, recovered}, country}) {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    const fetchAPI = async () =>{\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    fetchAPI()\r\n  }, []);\r\n\r\n  console.log('this is daiilyData: ', dailyData)\r\n\r\n  const lineChart = (\r\n    dailyData.length ? (<Line\r\n    data={{\r\n      labels: dailyData.map(({date}) => date),\r\n      datasets: [{\r\n        data: dailyData.map(({confirmed}) =>confirmed),\r\n        label: \"Infected\",\r\n        borderColor: \"#3333ff\",\r\n        fill: true\r\n      }, {\r\n        data: dailyData.map(({deaths}) =>deaths),\r\n        label: \"Deatsh\",\r\n        borderColor: \"red\",\r\n        backgroundColor: \"rgba(255, 0,0, 0.5)\",\r\n        fill: true\r\n      }]\r\n    }}\r\n    />) : \"Loading...\"\r\n  );\r\n\r\n  const barChart = (\r\n    confirmed\r\n    ? (\r\n      <Bar \r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [{\r\n            label: \"People\",\r\n            backgroundColor: [\r\n            'rgba(0,0,255,0.5)',\r\n            'rgba(0,255,0,0.5)',\r\n           'rgba(250,0,0,0.5)'],\r\n           data:[confirmed.value, recovered.value, deaths.value]\r\n          }]\r\n        }}\r\n        options={{\r\n          legend: {display: false},\r\n          title: {display: true, text: `Current state in ${country}`}\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\r\nimport {fetchCountries} from \"../../api\";\r\n\r\nimport styles from \"./countryPicker.module.css\";\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    const fetchAPI = async () =>{\r\n      setFetchedCountries(await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n  \r\n  return (\r\n    <div>\r\n      <FormControl className={styles.formControl}>\r\n        <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n          <option value=\"\">Global</option>\r\n          {fetchedCountries.map((country, index) =>(\r\n            <option key={index} value={country}>{country}</option>\r\n          ))}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountryPicker\r\n","export default __webpack_public_path__ + \"static/media/covid.6757f82d.png\";","import React, { Component } from 'react'\nimport {Cards, Charts, CountryPicker} from \"./components\"\nimport {fetchData} from \"./api\"; //index is not needed bc its default\nimport styles from \"./app.module.css\"\nimport covidImage from \"./images/covid.png\";\n\nexport default class App extends Component {\n  //not required to use constructor() in this case\n  state = {\n    data: {},\n    country: \"\",\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData});\n  }\n\n  handleCountryChange = async (country) =>{\n    const fetchedData = await fetchData(country);\n    console.log('fetched data from app.js presents: ', fetchedData)\n    console.log('from app.js present country: ', country);\n\n    this.setState({data: fetchedData, country: country})\n\n  }\n  render() {\n    const {data, country} = this.state;\n    return (\n      <div className={styles.container}>\n        <img src={covidImage} alt=\"header image that reads COVID-19\" className={styles.image}/>\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts data={data} country={country}/>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__3FKGd\",\"image\":\"app_image__2C3MZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__1pthP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countryPicker_formControl__3HpHU\"};"],"sourceRoot":""}